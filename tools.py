"""
This module consists of some helper functions for creating neuronal networks.
"""

import numpy as np

def poisson_homogenous(lam, timesteps):
    """
    Generate a poisson spike train for a single neuron
    using a homogenous poisson distribution.

    .. image:: _images/homogenous_plot.png
        :alt: Homogenous Poisson spike train
        :width: 400px

    :Example:

    The spike train of the image above was generated by following function:

    >>> poisson_homogenous(0.4, 200)

    :param lam: lambda value
    :type lam: Float
    :param timesteps: total length of spike train
    :type timesteps: Int

    """
    size = (1, timesteps)
    spiketrain = np.random.poisson(lam=lam, size=size)
    spiketrain = np.array(spiketrain, dtype=bool)

    return spiketrain

def poisson_inhomogenous(lambdas, timesteps):
    """
    Generate a poisson spike train for a single neuron
    using an inhomogenous poisson distribution.

    .. image:: _images/inhomogenous_plot.png
        :alt: Inhomogenous Poisson spike train
        :width: 400px

    :Example:

    The spike train of the image above was generated by following function:

    >>> poisson_inhomogenous((0.5, 0.25, 0, 0, 1, 0.5, 0, 0, 0.25, 0.5), 200)

    :param lambdas: Lambda values
    :type lambdas: List or Tuple
    :param timesteps: total length of the spike train
    :type timesteps: Int
    """

    if timesteps % len(lambdas) != 0:
        raise ValueError("Cannot divide the %d mu's on the %d timesteps equally." % (len(lambdas), timesteps))

    spiketrain = np.zeros((1, timesteps), dtype=bool)

    bucketsize = timesteps // len(lambdas)

    for i, lam in enumerate(lambdas):
        startindex = i*bucketsize
        spiketrain[0, startindex:startindex+bucketsize] = np.random.poisson(lam=lam, size=bucketsize)

    return spiketrain

def sound(timesteps, midpoint, maximum, variance):
    """

    Generates a spike train with a peak at *midpoint*.

    .. image:: _images/sound_plot.png
        :alt: Sound Plot
        :width: 400px

    :Example:

    The spike train of the image above was generated by following function:

    >>> sound(280, 150, 0.4, 50)

    :param timesteps:
    :param midpoint: central peak
    :param maximum: Lambda value at peak
    :param variance: Variance around peak
    :return:
    """
    mu = np.arange(timesteps)
    mu = maximum * np.exp(-((mu - midpoint ) ** 2) / variance ** 2)
    s = poisson_inhomogenous(mu, timesteps)
    return s


if __name__ == '__main__':
    s = poisson_homogenous(0.4, 200)
    from neurons import plotting
    psth = plotting.PSTH(s, binsize=25)
    psth.show_plot()
    plotting.show()